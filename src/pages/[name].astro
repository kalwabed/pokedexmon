---
import Element from '~components/Element.astro';
import GenderRate from '~components/GenderRate.astro';
import Layout from '~layouts/Layout.astro';
import { getAllPokemons, getPokemonDetail } from '~services/pokemon';

export async function getStaticPaths() {
  const pokemons = await getAllPokemons();

  return pokemons.map(p => ({ params: { name: p.name } }));
}

const { name } = Astro.params;
const baseStats = [];

const [species, pokemon] = await getPokemonDetail(name as string);

const { sprites, abilities, name: pokemonName, types, height, weight, stats } = pokemon;
const pokemonPic = sprites.other.dream_world.front_default ?? sprites.other.home.front_default;

const { flavor_text: description } = species.flavor_text_entries.find(({ language }) => language.name === 'en');
const { genus } = species.genera.find(({ language }) => language.name === 'en');
const abilitiesList = abilities.map(({ ability }) => ability.name);

for (let index = 0; index < stats.length; index++) {
  const obj = {};
  obj['statName'] = stats[index].stat.name;
  obj['baseStat'] = stats[index].base_stat;
  baseStats.push(obj);
}
---

<Layout title={name.toString().toLocaleUpperCase()}>
  <div class='card max-w-6xl w-full mx-auto rounded-lg border-2 p-8 bg-white shadow'>
    <div class='flex justify-between w-full gap-8'>
      <div class='flex flex-col w-1/3 bg-red-50 rounded shadow p-4 items-center justify-start'>
        <h1 class='text-4xl font-bold capitalize mb-4'>
          {name}
        </h1>
        <p class='py-1 px-2 font-mono bg-orange-300 rounded-lg text-orange-900 mb-8'>
          {genus}
        </p>
        <img src={pokemonPic} alt={pokemonName} width='140' height='140' decoding='async' loading='lazy' />
        <div class='inline-flex items-center gap-3 mt-6'>
          {types.map(tp => <Element element={tp.type.name} />)}
        </div>

        <div class='inline-flex gap-4 mt-8'>
          <b>Height</b>
          <span>{height / 10} m</span>
        </div>
        <div class='inline-flex gap-4 mt-4'>
          <b>Weight</b>
          <span>{weight / 10} kg</span>
        </div>

        <div class='inline-flex mt-4'>
          <GenderRate genderRate={species.gender_rate} />
        </div>
      </div>

      <div class='flex flex-col gap-6 w-full'>
        <div class='flex flex-col gap-2'>
          <b class='text-xl'>About</b>
          <div class='bg-blue-100 bg-opacity-50 w-full p-2 rounded-md'>
            <p>
              {description}
            </p>
          </div>
        </div>

        <div class='flex flex-col gap-2'>
          <b class='text-xl'>Abilities</b>
          <div class='bg-blue-100 bg-opacity-50 w-full p-2 rounded-md'>
            <ul class='grid grid-cols-4 ml-5'>
              {abilitiesList.map(ability => <li class='list-disc capitalize font-semibold'>{ability}</li>)}
            </ul>
          </div>
        </div>

        <div class='flex flex-col gap-2'>
          <b class='text-xl'>Base Stats</b>
          <div class='bg-blue-100 bg-opacity-50 w-full p-2 rounded-md'>
            <ul class='grid grid-cols-3 gap-x-2 gap-y-4 ml-5'>
              {baseStats.map(bs => (
                <li class='flex flex-col'>
                  <b class='capitalize'>{bs['statName']}</b>
                  <span class='tabular-nums'>{bs['baseStat']}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .card {
    border-color: var(--color-border);
  }
</style>
